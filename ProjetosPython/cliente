class Cliente:
    def __init__(self, nome, cpf, telefone, endereco):
        self.nome = nome
        self.cpf = cpf
        self.telefone = telefone
        self.endereco = endereco




cliente = Cliente("João da Silva", "123.456.789-01", "11 99999-9999", "Rua das Flores, 123")
quadra = Quadra("Quadra 1", 8, 22, 1)

data = datetime.date(2022, 1, 1)
hora_inicio = 20
hora_fim = 21

if quadra.agendar(data, hora_inicio, hora_fim):
    print("Agendamento realizado com sucesso!")
else:
    print("Não foi possível realizar o agendamento.")

----------------------------------------------------------------------------------------------------

def test_criar_cliente():
    cliente = Cliente("João da Silva", "123.456.789-01", "11 99999-9999", "Rua das Flores, 123")
    assert cliente.nome == "João da Silva"
    assert cliente.cpf == "123.456.789-01"
    assert cliente.telefone == "11 99999-9999"
    assert cliente.endereco == "Rua das Flores, 123"

def test_atualizar_propriedade():
    cliente = Cliente("João da Silva", "123.456.789-01", "11 99999-9999", "Rua das Flores, 123")
    cliente.nome = "Maria da Silva"
    cliente.cpf = "987.654.321-09"
    cliente.telefone = "11 12345-6789"
    cliente.endereco = "Rua dos Jardins, 456"
    assert cliente.nome == "Maria da Silva"
    assert cliente.cpf == "987.654.321-09"
    assert cliente.telefone == "11 12345-6789"
    assert cliente.endereco == "Rua dos Jardins, 456"

def test_validar_cpf():
    cliente = Cliente("João da Silva", "123.456.789-01", "11 99999-9999", "Rua das Flores, 123")
    assert cliente.cpf_valido() == True
    cliente.cpf = "abc.def.ghi-jk"
    assert cliente.cpf_valido() == False

def test_validar_telefone():
    cliente = Cliente("João da Silva", "123.456.789-01", "11 99999-9999", "Rua das Flores, 123")
    assert cliente.telefone_valido() == True
    cliente.telefone = "abcdefghij"
    assert cliente.telefone_valido() == False

